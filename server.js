const fs = require("fs");
const path = require("path");
const puppeteer = require("puppeteer");
const { createWorker } = require("tesseract.js");
const TelegramBot = require("node-telegram-bot-api");
require("dotenv").config();

const TELEGRAM_CHAT_IDS = String(process.env.TELEGRAM_CHAT_IDS).split(",").map((id) =>
  id.trim()
);

const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramBot(TOKEN);
const cookies = JSON.parse(fs.readFileSync(process.env.COOKIE_FILE_NAME, "utf-8"));

const LAST_TEXT_PATH = "last_message.txt";
let previousText = fs.existsSync(LAST_TEXT_PATH)
  ? fs.readFileSync(LAST_TEXT_PATH, "utf-8")
  : "";

async function checkAvitoMessages() {
  console.log("üïí –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ê–≤–∏—Ç–æ...");

const browser = await puppeteer.launch({
  headless: "new",
  args: ['--no-sandbox', '--disable-setuid-sandbox']
});

  const page = await browser.newPage();

  try {
    await page.setViewport({ width: 1280, height: 800 });
    await page.setCookie(...cookies);

    await page.goto("https://www.avito.ru/profile/messenger", {
      waitUntil: "networkidle2",
    });

    const screenshotPath = "avito_messages.png";

    await page.screenshot({
      path: screenshotPath,
      clip: {
        x: 600,
        y: 430,
        width: 500,
        height: 80,
      },
    });

    const stats = fs.statSync(screenshotPath);
    if (!stats.size) throw new Error("–§–∞–π–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø—É—Å—Ç–æ–π");

    const worker = await createWorker("rus");
    const {
      data: { text },
    } = await worker.recognize(screenshotPath);
    await worker.terminate();

    const cleanedText = text.trim().split("\n")[2];

    if (cleanedText && cleanedText !== previousText) {
      console.log("üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:");
      console.log(cleanedText);

      previousText = cleanedText;
      fs.writeFileSync("last_message.txt", cleanedText);

      for (const id of TELEGRAM_CHAT_IDS) {
        await bot.sendPhoto(id, screenshotPath, {
          caption: `üì• –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫–∫–∞—É–Ω—Ç–∞ ${process.env.ACCOUNT_OWNER}:\n\n${cleanedText}`,
          contentType: "image/png",
        });
      }
      console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!");
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", err.message || err);
  } finally {
    await browser.close();
    const delay = 30000 + Math.random() * 120;
    console.log(`‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ ${(delay / 1000).toFixed(0)} —Å–µ–∫`);
    setTimeout(checkAvitoMessages, delay);
  }
}

checkAvitoMessages();
